name: Release

on:
  release:
    types: [published]

permissions: read-all

env:
  ASSET: "" # Set during build
  BINARY_NAME: aucpl
  CARGO_INCREMENTAL: 0

jobs:
  build-release:
    name: build-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        build:
          [
            linux-x86_64-musl,
            linux-aarch64-musl,
            macos-x86_64,
            macos-aarch64,
            win-msvc,
          ]
        include:
          - build: linux-x86_64-musl
            os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
          - build: linux-aarch64-musl
            os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
          - build: macos-x86_64
            os: macos-13
            target: x86_64-apple-darwin
          - build: macos-aarch64
            os: macos-14
            target: aarch64-apple-darwin
          - build: win-msvc
            os: windows-2022
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      - name: Build release binary
        shell: bash
        run: cargo build --target ${{ matrix.target }} --release --verbose
      - name: Build archive
        shell: bash
        run: |
          outdir="target/${{ matrix.target }}/release"
          staging="${{ env.BINARY_NAME }}-${RELEASE_TAG_NAME}-${{ matrix.target }}"
          mkdir "$staging"
          cp {README.md,LICENSE} "$staging/"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            cp "$outdir/${{ env.BINARY_NAME }}.exe" "$staging/"
            cd "$staging"
            7z a "../$staging.zip" .
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "$outdir/${{ env.BINARY_NAME }}" "$staging/"
            tar czf "$staging.tar.gz" -C "$staging" .
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi
        env:
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
      - name: Upload release archive
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ASSET }}
          name: ${{ env.ASSET }}
